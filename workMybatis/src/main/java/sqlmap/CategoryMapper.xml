<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="dao.CategoryMapperExt" >
  <resultMap id="BaseResultMap" type="model.Category" >
    <id column="CategoryID" property="categoryid" jdbcType="INTEGER" />
    <result column="CategoryName" property="categoryname" jdbcType="NVARCHAR" />
    <result column="Description" property="description" jdbcType="LONGNVARCHAR" />
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="model.Category" extends="BaseResultMap" >
    <result column="Picture" property="picture" jdbcType="LONGVARBINARY" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    CategoryID, CategoryName, Description
  </sql>
  <sql id="Blob_Column_List" >
    Picture
  </sql>
  <select id="selectByExampleWithBLOBs" resultMap="ResultMapWithBLOBs" parameterType="model.CategoryExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from Categories
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="model.CategoryExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from Categories
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from Categories
    where CategoryID = #{categoryid,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from Categories
    where CategoryID = #{categoryid,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="model.CategoryExample" >
    delete from Categories
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="model.Category" useGeneratedKeys="true" keyProperty="categoryid" >
    insert into Categories (CategoryName, Description, 
      Picture)
    values (#{categoryname,jdbcType=NVARCHAR}, #{description,jdbcType=LONGNVARCHAR}, 
      #{picture,jdbcType=LONGVARBINARY})
  </insert>
  <insert id="insertSelective" parameterType="model.Category" useGeneratedKeys="true" keyProperty="categoryid" >
    insert into Categories
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="categoryname != null" >
        CategoryName,
      </if>
      <if test="description != null" >
        Description,
      </if>
      <if test="picture != null" >
        Picture,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="categoryname != null" >
        #{categoryname,jdbcType=NVARCHAR},
      </if>
      <if test="description != null" >
        #{description,jdbcType=LONGNVARCHAR},
      </if>
      <if test="picture != null" >
        #{picture,jdbcType=LONGVARBINARY},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="model.CategoryExample" resultType="java.lang.Integer" >
    select count(*) from Categories
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update Categories
    <set >
      <if test="record.categoryid != null" >
        CategoryID = #{record.categoryid,jdbcType=INTEGER},
      </if>
      <if test="record.categoryname != null" >
        CategoryName = #{record.categoryname,jdbcType=NVARCHAR},
      </if>
      <if test="record.description != null" >
        Description = #{record.description,jdbcType=LONGNVARCHAR},
      </if>
      <if test="record.picture != null" >
        Picture = #{record.picture,jdbcType=LONGVARBINARY},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map" >
    update Categories
    set CategoryID = #{record.categoryid,jdbcType=INTEGER},
      CategoryName = #{record.categoryname,jdbcType=NVARCHAR},
      Description = #{record.description,jdbcType=LONGNVARCHAR},
      Picture = #{record.picture,jdbcType=LONGVARBINARY}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update Categories
    set CategoryID = #{record.categoryid,jdbcType=INTEGER},
      CategoryName = #{record.categoryname,jdbcType=NVARCHAR},
      Description = #{record.description,jdbcType=LONGNVARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="model.Category" >
    update Categories
    <set >
      <if test="categoryname != null" >
        CategoryName = #{categoryname,jdbcType=NVARCHAR},
      </if>
      <if test="description != null" >
        Description = #{description,jdbcType=LONGNVARCHAR},
      </if>
      <if test="picture != null" >
        Picture = #{picture,jdbcType=LONGVARBINARY},
      </if>
    </set>
    where CategoryID = #{categoryid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="model.Category" >
    update Categories
    set CategoryName = #{categoryname,jdbcType=NVARCHAR},
      Description = #{description,jdbcType=LONGNVARCHAR},
      Picture = #{picture,jdbcType=LONGVARBINARY}
    where CategoryID = #{categoryid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="model.Category" >
    update Categories
    set CategoryName = #{categoryname,jdbcType=NVARCHAR},
      Description = #{description,jdbcType=LONGNVARCHAR}
    where CategoryID = #{categoryid,jdbcType=INTEGER}
  </update>
</mapper>