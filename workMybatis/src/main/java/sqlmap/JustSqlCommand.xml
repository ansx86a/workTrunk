<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="JustSqlCommand">
	<resultMap id="BaseResultMap" type="model.Config">
		<id column="config_id" property="configId" jdbcType="INTEGER" />
		<result column="type" property="type" jdbcType="NVARCHAR" />
		<result column="name" property="name" jdbcType="NVARCHAR" />
		<result column="value" property="value" jdbcType="NVARCHAR" />
		<result column="description" property="description" jdbcType="NVARCHAR" />
	</resultMap>
	<sql id="Example_Where_Clause">
		<where>
			<foreach collection="oredCriteria" item="criteria" separator="or">
				<if test="criteria.valid">
					<trim prefix="(" suffix=")" prefixOverrides="and">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value} and
									#{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach collection="criterion.value" item="listItem"
										open="(" close=")" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Update_By_Example_Where_Clause">
		<where>
			<foreach collection="example.oredCriteria" item="criteria"
				separator="or">
				<if test="criteria.valid">
					<trim prefix="(" suffix=")" prefixOverrides="and">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value} and
									#{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach collection="criterion.value" item="listItem"
										open="(" close=")" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Base_Column_List">
		config_id, type, name, value, description
	</sql>
	<select id="selectByExample" resultMap="BaseResultMap"
		parameterType="model.ConfigExample">
		select
		<if test="distinct">
			distinct
		</if>
		<include refid="Base_Column_List" />
		from config
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
		<if test="orderByClause != null">
			order by ${orderByClause}
		</if>
	</select>
	<select id="selectByPrimaryKey" resultMap="BaseResultMap"
		parameterType="java.lang.Integer">
		select
		<include refid="Base_Column_List" />
		from config
		where config_id = #{configId,jdbcType=INTEGER}
	</select>
	<delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
		delete from config
		where config_id = #{configId,jdbcType=INTEGER}
	</delete>
	<delete id="deleteByExample" parameterType="model.ConfigExample">
		delete from config
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
	</delete>
	<insert id="insert" parameterType="model.Config">
		insert into config (config_id, type, name,
		value, description)
		values (#{configId,jdbcType=INTEGER}, #{type,jdbcType=NVARCHAR},
		#{name,jdbcType=NVARCHAR},
		#{value,jdbcType=NVARCHAR}, #{description,jdbcType=NVARCHAR})
	</insert>
	<insert id="insertSelective" parameterType="model.Config">
		insert into config
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="configId != null">
				config_id,
			</if>
			<if test="type != null">
				type,
			</if>
			<if test="name != null">
				name,
			</if>
			<if test="value != null">
				value,
			</if>
			<if test="description != null">
				description,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="configId != null">
				#{configId,jdbcType=INTEGER},
			</if>
			<if test="type != null">
				#{type,jdbcType=NVARCHAR},
			</if>
			<if test="name != null">
				#{name,jdbcType=NVARCHAR},
			</if>
			<if test="value != null">
				#{value,jdbcType=NVARCHAR},
			</if>
			<if test="description != null">
				#{description,jdbcType=NVARCHAR},
			</if>
		</trim>
	</insert>
	<select id="countByExample" parameterType="model.ConfigExample"
		resultType="java.lang.Integer">
		select count(*) from config
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
	</select>
	<update id="updateByExampleSelective" parameterType="map">
		update config
		<set>
			<if test="record.configId != null">
				config_id = #{record.configId,jdbcType=INTEGER},
			</if>
			<if test="record.type != null">
				type = #{record.type,jdbcType=NVARCHAR},
			</if>
			<if test="record.name != null">
				name = #{record.name,jdbcType=NVARCHAR},
			</if>
			<if test="record.value != null">
				value = #{record.value,jdbcType=NVARCHAR},
			</if>
			<if test="record.description != null">
				description = #{record.description,jdbcType=NVARCHAR},
			</if>
		</set>
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>
	<update id="updateByExample" parameterType="map">
		update config
		set config_id = #{record.configId,jdbcType=INTEGER},
		type = #{record.type,jdbcType=NVARCHAR},
		name = #{record.name,jdbcType=NVARCHAR},
		value = #{record.value,jdbcType=NVARCHAR},
		description = #{record.description,jdbcType=NVARCHAR}
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>
	<update id="updateByPrimaryKeySelective" parameterType="model.Config">
		update config
		<set>
			<if test="type != null">
				type = #{type,jdbcType=NVARCHAR},
			</if>
			<if test="name != null">
				name = #{name,jdbcType=NVARCHAR},
			</if>
			<if test="value != null">
				value = #{value,jdbcType=NVARCHAR},
			</if>
			<if test="description != null">
				description = #{description,jdbcType=NVARCHAR},
			</if>
		</set>
		where config_id = #{configId,jdbcType=INTEGER}
	</update>
	<update id="updateByPrimaryKey" parameterType="model.Config">
		update config
		set type = #{type,jdbcType=NVARCHAR},
		name = #{name,jdbcType=NVARCHAR},
		value = #{value,jdbcType=NVARCHAR},
		description = #{description,jdbcType=NVARCHAR}
		where config_id = #{configId,jdbcType=INTEGER}
	</update>

	<update id="updateByPrimaryKeySelective2" parameterType="model.Config">
		update config
		<set>
			<if test="type != null">
				type = #{type,jdbcType=NVARCHAR},
			</if>
			<if test="type != null">
				type = #{type,jdbcType=NVARCHAR},
			</if>
			<if test="name != null">
				name = #{name,jdbcType=NVARCHAR},
			</if>
			<if test="value != null">
				value = #{value,jdbcType=NVARCHAR},
			</if>
			<if test="description != null">
				description = #{description,jdbcType=NVARCHAR},
			</if>
		</set>
		where config_id = #{configId,jdbcType=INTEGER}
	</update>

	<update id="updateByPrimaryKeySelective3" parameterType="map">
		update config
		<set>
			<if test="type != null">
				type = :type,
			</if>
			<if test="type != null">
				type = :type,
			</if>
			<if test="name != null">
				name =:name,
			</if>
			<if test="value != null">
				value =:value,
			</if>
			<if test="description != null">
				description = :description,
			</if>
		</set>
		where config_id =:configId
	</update>

</mapper>