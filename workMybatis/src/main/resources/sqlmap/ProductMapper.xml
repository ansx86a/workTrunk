<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="dao.ProductMapperExt" >
  <resultMap id="BaseResultMap" type="model.Product" >
    <id column="ProductID" property="productid" jdbcType="INTEGER" />
    <result column="ProductName" property="productname" jdbcType="NVARCHAR" />
    <result column="SupplierID" property="supplierid" jdbcType="INTEGER" />
    <result column="CategoryID" property="categoryid" jdbcType="INTEGER" />
    <result column="QuantityPerUnit" property="quantityperunit" jdbcType="NVARCHAR" />
    <result column="UnitPrice" property="unitprice" jdbcType="DECIMAL" />
    <result column="UnitsInStock" property="unitsinstock" jdbcType="SMALLINT" />
    <result column="UnitsOnOrder" property="unitsonorder" jdbcType="SMALLINT" />
    <result column="ReorderLevel" property="reorderlevel" jdbcType="SMALLINT" />
    <result column="Discontinued" property="discontinued" jdbcType="BIT" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    ProductID, ProductName, SupplierID, CategoryID, QuantityPerUnit, UnitPrice, UnitsInStock, 
    UnitsOnOrder, ReorderLevel, Discontinued
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="model.ProductExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from Products
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from Products
    where ProductID = #{productid,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from Products
    where ProductID = #{productid,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="model.ProductExample" >
    delete from Products
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="model.Product" useGeneratedKeys="true" keyProperty="productid" >
    insert into Products (ProductName, SupplierID, CategoryID, 
      QuantityPerUnit, UnitPrice, UnitsInStock, 
      UnitsOnOrder, ReorderLevel, Discontinued
      )
    values (#{productname,jdbcType=NVARCHAR}, #{supplierid,jdbcType=INTEGER}, #{categoryid,jdbcType=INTEGER}, 
      #{quantityperunit,jdbcType=NVARCHAR}, #{unitprice,jdbcType=DECIMAL}, #{unitsinstock,jdbcType=SMALLINT}, 
      #{unitsonorder,jdbcType=SMALLINT}, #{reorderlevel,jdbcType=SMALLINT}, #{discontinued,jdbcType=BIT}
      )
  </insert>
  <insert id="insertSelective" parameterType="model.Product" useGeneratedKeys="true" keyProperty="productid" >
    insert into Products
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="productname != null" >
        ProductName,
      </if>
      <if test="supplierid != null" >
        SupplierID,
      </if>
      <if test="categoryid != null" >
        CategoryID,
      </if>
      <if test="quantityperunit != null" >
        QuantityPerUnit,
      </if>
      <if test="unitprice != null" >
        UnitPrice,
      </if>
      <if test="unitsinstock != null" >
        UnitsInStock,
      </if>
      <if test="unitsonorder != null" >
        UnitsOnOrder,
      </if>
      <if test="reorderlevel != null" >
        ReorderLevel,
      </if>
      <if test="discontinued != null" >
        Discontinued,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="productname != null" >
        #{productname,jdbcType=NVARCHAR},
      </if>
      <if test="supplierid != null" >
        #{supplierid,jdbcType=INTEGER},
      </if>
      <if test="categoryid != null" >
        #{categoryid,jdbcType=INTEGER},
      </if>
      <if test="quantityperunit != null" >
        #{quantityperunit,jdbcType=NVARCHAR},
      </if>
      <if test="unitprice != null" >
        #{unitprice,jdbcType=DECIMAL},
      </if>
      <if test="unitsinstock != null" >
        #{unitsinstock,jdbcType=SMALLINT},
      </if>
      <if test="unitsonorder != null" >
        #{unitsonorder,jdbcType=SMALLINT},
      </if>
      <if test="reorderlevel != null" >
        #{reorderlevel,jdbcType=SMALLINT},
      </if>
      <if test="discontinued != null" >
        #{discontinued,jdbcType=BIT},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="model.ProductExample" resultType="java.lang.Integer" >
    select count(*) from Products
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update Products
    <set >
      <if test="record.productid != null" >
        ProductID = #{record.productid,jdbcType=INTEGER},
      </if>
      <if test="record.productname != null" >
        ProductName = #{record.productname,jdbcType=NVARCHAR},
      </if>
      <if test="record.supplierid != null" >
        SupplierID = #{record.supplierid,jdbcType=INTEGER},
      </if>
      <if test="record.categoryid != null" >
        CategoryID = #{record.categoryid,jdbcType=INTEGER},
      </if>
      <if test="record.quantityperunit != null" >
        QuantityPerUnit = #{record.quantityperunit,jdbcType=NVARCHAR},
      </if>
      <if test="record.unitprice != null" >
        UnitPrice = #{record.unitprice,jdbcType=DECIMAL},
      </if>
      <if test="record.unitsinstock != null" >
        UnitsInStock = #{record.unitsinstock,jdbcType=SMALLINT},
      </if>
      <if test="record.unitsonorder != null" >
        UnitsOnOrder = #{record.unitsonorder,jdbcType=SMALLINT},
      </if>
      <if test="record.reorderlevel != null" >
        ReorderLevel = #{record.reorderlevel,jdbcType=SMALLINT},
      </if>
      <if test="record.discontinued != null" >
        Discontinued = #{record.discontinued,jdbcType=BIT},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update Products
    set ProductID = #{record.productid,jdbcType=INTEGER},
      ProductName = #{record.productname,jdbcType=NVARCHAR},
      SupplierID = #{record.supplierid,jdbcType=INTEGER},
      CategoryID = #{record.categoryid,jdbcType=INTEGER},
      QuantityPerUnit = #{record.quantityperunit,jdbcType=NVARCHAR},
      UnitPrice = #{record.unitprice,jdbcType=DECIMAL},
      UnitsInStock = #{record.unitsinstock,jdbcType=SMALLINT},
      UnitsOnOrder = #{record.unitsonorder,jdbcType=SMALLINT},
      ReorderLevel = #{record.reorderlevel,jdbcType=SMALLINT},
      Discontinued = #{record.discontinued,jdbcType=BIT}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="model.Product" >
    update Products
    <set >
      <if test="productname != null" >
        ProductName = #{productname,jdbcType=NVARCHAR},
      </if>
      <if test="supplierid != null" >
        SupplierID = #{supplierid,jdbcType=INTEGER},
      </if>
      <if test="categoryid != null" >
        CategoryID = #{categoryid,jdbcType=INTEGER},
      </if>
      <if test="quantityperunit != null" >
        QuantityPerUnit = #{quantityperunit,jdbcType=NVARCHAR},
      </if>
      <if test="unitprice != null" >
        UnitPrice = #{unitprice,jdbcType=DECIMAL},
      </if>
      <if test="unitsinstock != null" >
        UnitsInStock = #{unitsinstock,jdbcType=SMALLINT},
      </if>
      <if test="unitsonorder != null" >
        UnitsOnOrder = #{unitsonorder,jdbcType=SMALLINT},
      </if>
      <if test="reorderlevel != null" >
        ReorderLevel = #{reorderlevel,jdbcType=SMALLINT},
      </if>
      <if test="discontinued != null" >
        Discontinued = #{discontinued,jdbcType=BIT},
      </if>
    </set>
    where ProductID = #{productid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="model.Product" >
    update Products
    set ProductName = #{productname,jdbcType=NVARCHAR},
      SupplierID = #{supplierid,jdbcType=INTEGER},
      CategoryID = #{categoryid,jdbcType=INTEGER},
      QuantityPerUnit = #{quantityperunit,jdbcType=NVARCHAR},
      UnitPrice = #{unitprice,jdbcType=DECIMAL},
      UnitsInStock = #{unitsinstock,jdbcType=SMALLINT},
      UnitsOnOrder = #{unitsonorder,jdbcType=SMALLINT},
      ReorderLevel = #{reorderlevel,jdbcType=SMALLINT},
      Discontinued = #{discontinued,jdbcType=BIT}
    where ProductID = #{productid,jdbcType=INTEGER}
  </update>
</mapper>